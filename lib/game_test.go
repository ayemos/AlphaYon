package alphaYon

import (
	"testing"
)

type boardTest struct {
	pins   []rune
	status GameStatus
}

var boardsToTest = []boardTest{
	boardTest{
		[]rune{
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, RUNNING},

	boardTest{
		[]rune{
			'b', '.', '.', '.',
			'b', '.', '.', '.',
			'b', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, RUNNING},

	boardTest{
		[]rune{
			'b', '.', '.', '.',
			'b', '.', '.', '.',
			'b', '.', '.', '.',
			'b', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, BLACK_WON},

	boardTest{
		[]rune{
			'w', '.', '.', '.',
			'w', '.', '.', '.',
			'w', '.', '.', '.',
			'w', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, WHITE_WON},

	boardTest{
		[]rune{
			'b', 'b', 'b', 'b',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, BLACK_WON},

	boardTest{
		[]rune{
			'b', '.', '.', '.',
			'.', 'b', '.', '.',
			'.', '.', 'b', '.',
			'.', '.', '.', 'b',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, BLACK_WON},

	boardTest{
		[]rune{
			'b', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'b', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'b', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'b', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, BLACK_WON},

	boardTest{
		[]rune{
			'b', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', 'b', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', 'b', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', 'b'}, BLACK_WON},

	boardTest{
		[]rune{
			'b', 'w', 'b', 'w',
			'w', 'b', 'w', 'b',
			'w', 'b', 'w', 'b',
			'w', 'w', 'b', 'w',

			'b', 'w', 'b', 'b',
			'.', 'w', '.', '.',
			'.', 'w', '.', '.',
			'.', 'w', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',

			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.',
			'.', '.', '.', '.'}, WHITE_WON},

	boardTest{
		[]rune{
			'w', 'w', 'b', 'w',
			'.', 'b', 'w', 'w',
			'b', 'b', 'w', 'b',
			'b', 'b', 'b', 'w',

			'w', 'w', 'b', 'b',
			'.', 'b', 'b', 'w',
			'.', 'b', 'b', 'w',
			'w', 'b', 'w', '.',

			'.', '.', 'b', '.',
			'.', 'w', 'b', '.',
			'.', 'b', 'b', 'b',
			'.', 'b', 'w', '.',

			'.', '.', 'w', '.',
			'.', 'w', '.', '.',
			'.', 'w', 'w', 'w',
			'.', 'w', 'b', '.'}, BLACK_WON},

	boardTest{
		[]rune{
			'w', 'w', 'b', 'w',
			'b', 'b', 'w', 'w',
			'b', 'b', 'w', 'b',
			'b', 'b', 'b', 'w',

			'w', 'w', 'b', 'b',
			'b', 'b', 'w', 'w',
			'b', 'b', 'b', 'w',
			'w', 'b', 'w', 'b',

			'b', 'w', 'b', 'w',
			'b', 'w', 'b', 'b',
			'w', 'b', 'b', 'b',
			'w', 'b', 'w', 'b',

			'b', 'b', 'w', 'b',
			'w', 'w', 'b', 'w',
			'b', 'w', 'w', 'w',
			'w', 'w', 'b', 'w'}, DRAW},
}

func TestJudge(t *testing.T) {
	for _, test := range boardsToTest {
		b := NewBoard(4)
		err := b.loadArray(test.pins)

		if err != nil {
			t.Errorf("Setup error: %s.", err)
		}

		status := Judge(b)

		if status != test.status {
			t.Errorf("Judge(%s) = %s, want %s.", b, status, test.status)
		}
	}
}
